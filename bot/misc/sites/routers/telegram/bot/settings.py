from aiogram import F, Router
from aiogram.types import (
    Message, ReplyKeyboardRemove,
    ChatMemberAdministrator, ChatMemberMember, ChatMemberOwner,
    InlineKeyboardButton, CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

response = "<b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ Discord!</b>"


def get_keyboard(chat_id: int):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text='–ó–∞–≤–µ—Ä—à–∏—Ç—å',
        callback_data=f'end:{chat_id}'
    ))
    return builder.as_markup()


@router.callback_query(F.data.startswith("end:"))
async def on_inline(query: CallbackQuery, storage: dict, dispatch):
    chat_id = int(query.data.removeprefix("end:"))
    if chat_id not in storage:
        return
    chat_shared, categories, _ = storage.pop(chat_id)

    await query.message.answer(response,
                               reply_markup=ReplyKeyboardRemove())
    await query.answer()

    dispatch('tg_channel_joined',
             chat_shared.request_id//10,
             chat_shared,
             categories)


@router.message(F.chat_shared)
async def on_chat_shared(message: Message, storage: dict, dispatch):
    try:
        me = await message.bot.me()
        status = await message.bot.get_chat_member(message.chat_shared.chat_id,
                                                   me.id)
    except Exception:
        status = False
    else:
        status = isinstance(
            status, (ChatMemberMember, ChatMemberAdministrator))

    if not status:
        await message.answer("–ë–æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
        return

    status = await message.bot.get_chat_member(message.chat_shared.chat_id, message.from_user.id)

    if not isinstance(status, (ChatMemberAdministrator, ChatMemberOwner)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
        return

    chat = await message.bot.get_chat(message.chat_shared.chat_id)
    if not chat.is_forum:
        await message.answer(response,
                             reply_markup=ReplyKeyboardRemove())
        dispatch('tg_channel_joined',
                 message.chat_shared.request_id//10,
                 message.chat_shared,
                 None)
    else:
        storage[chat.id] = (message.chat_shared, [], message.from_user)
        await message.answer(
            ("<b>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
             "üì© –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–æ—Ä—É–º–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã.\n"
             "üëâ –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/active</code>\n"
             "‚úÖ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å</b> –Ω–∏–∂–µ."),
            reply_markup=get_keyboard(
                chat.id)
        )
