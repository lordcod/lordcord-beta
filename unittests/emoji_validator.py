import unittest
import sys
import os

sys.path.append(os.getcwd())

import bot.misc.utils.co_emoji as color_utils


class TestColorUtils(unittest.TestCase):

    def test_is_default_emoji(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ emoji —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º is_emoji
        emoji_char = "üòÄ"
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ emoji.is_emoji, —Ç–∞–∫ –∫–∞–∫ EMOJI_DATA –±–æ–ª—å—à–µ –Ω–µ—Ç
        result = color_utils.is_default_emoji(emoji_char)
        self.assertTrue(result)

    def test_is_custom_emoji(self):
        self.assertTrue(color_utils.is_custom_emoji("<:custom:123456789012345678>"))
        self.assertTrue(color_utils.is_custom_emoji("<a:custom:123456789012345678>"))
        self.assertFalse(color_utils.is_custom_emoji("üòÄ"))
        self.assertFalse(color_utils.is_custom_emoji("not an emoji"))

    def test_is_emoji(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ emoji
        self.assertTrue(color_utils.is_emoji("üòÄ"))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ emoji
        self.assertTrue(color_utils.is_emoji("<:custom:123456789012345678>"))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ –∫–æ–¥—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True)
        self.assertTrue(color_utils.is_emoji(""))

    def test_to_rgb_hex_string(self):
        rgb = color_utils.to_rgb("#FF0000")
        # –û–∂–∏–¥–∞–µ–º (0, 0, 255), —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BGR –ø–æ—Ä—è–¥–æ–∫
        self.assertEqual(rgb, (0, 0, 255))  # –ö—Ä–∞—Å–Ω—ã–π

    def test_to_rgb_int(self):
        rgb = color_utils.to_rgb(0x00FF00)
        self.assertEqual(rgb, (0, 255, 0))  # –ó–µ–ª–µ–Ω—ã–π

    def test_to_rgb_short_hex(self):
        rgb = color_utils.to_rgb("0x0000FF")
        self.assertEqual(rgb, (0, 0, 255))  # –°–∏–Ω–∏–π

    def test_find_color_emoji_returns_known_emoji(self):
        emoji_result = color_utils.find_color_emoji("#FF0000")
        self.assertIsInstance(emoji_result, str)
        self.assertTrue(emoji_result.startswith("<:"))


if __name__ == '__main__':
    unittest.main()
